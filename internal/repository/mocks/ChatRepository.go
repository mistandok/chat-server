// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx
func (_m *ChatRepository) Create(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, chatID
func (_m *ChatRepository) Delete(ctx context.Context, chatID int64) error {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsUserInChat provides a mock function with given fields: _a0, _a1, _a2
func (_m *ChatRepository) IsUserInChat(_a0 context.Context, _a1 int64, _a2 int64) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for IsUserInChat")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkChatAndUsers provides a mock function with given fields: _a0, _a1, _a2
func (_m *ChatRepository) LinkChatAndUsers(_a0 context.Context, _a1 int64, _a2 []int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for LinkChatAndUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
